package com.calculadora.analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
     private List<String> resultados = new ArrayList<>();
    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico
     * en el que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.");
    }

    public List<String> getResultados(){
        return resultados;
    }
:}

terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String ENTERO;
terminal String DECIMAL;
terminal String UMENOS;

non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal Double expresion;

precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence right UMENOS;

start with ini;

ini::=instrucciones;

instrucciones ::=
   instruccion instrucciones
 | instruccion
 | error instrucciones
;

instruccion ::=
     expresion:a  {:System.out.println("El valor de la expresión es: "+a);
                                              resultados.add(a.toString());
                                            :}
;

expresion  ::=
    MENOS expresion:a                      {:RESULT=a*-1;:}%prec UMENOS
 |  expresion:a MAS        expresion:b     {:RESULT=a+b;:}
 |  expresion:a MENOS      expresion:b     {:RESULT=a-b;:}
 |  expresion:a POR        expresion:b     {:RESULT=a*b;:}
 |  expresion:a DIVIDIDO   expresion:b     {:RESULT=a/b;:}
 |  ENTERO:a                               {:RESULT=new Double(a);:}
 |  DECIMAL:a                              {:RESULT=new Double(a);:}
 |  PARIZQ expresion:a PARDER              {:RESULT=a;:}
 | CORIZQ expresion:a CORDER               {:RESULT=a;:}
;